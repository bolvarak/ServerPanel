///////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <ServerPanelClientMainWindow.h>
#include <ui_ServerPanelClientMainWindow.h>

///////////////////////////////////////////////////////////////////////////////
/// Globals //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

ServerPanelClientMainWindow* ServerPanelClientMainWindow::mInstance = NULL;

///////////////////////////////////////////////////////////////////////////////
/// Singleton ////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

ServerPanelClientMainWindow* ServerPanelClientMainWindow::Instance(QWidget* cParent) {
    // Check for an existing instance
    if (!mInstance) {
        // Create a new instance
        mInstance = new ServerPanelClientMainWindow(cParent);
    }
    // Return the instance
    return mInstance;
}

///////////////////////////////////////////////////////////////////////////////
/// Constructor //////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

ServerPanelClientMainWindow::ServerPanelClientMainWindow(QWidget* cParent) : QMainWindow(cParent), mUserInterface(new Ui::ServerPanelClientMainWindow) {
    // Setup the user interface
    this->mUserInterface->setupUi(this);
    // Display the username
    this->mUserInterface->btnAccount->setText(ServerPanel::Instance()->GetRemoteAccount().getProperty("sUsername").toString());
    // Load the account domains
    this->LoadDomains();
}

///////////////////////////////////////////////////////////////////////////////
/// Destructor ///////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

ServerPanelClientMainWindow::~ServerPanelClientMainWindow() {
    // Delete the user interface
    delete this->mUserInterface;
    // Delete the instance
    delete this->mInstance;
}

///////////////////////////////////////////////////////////////////////////////
/// Public Methods ///////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
/// Protected Methods ////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

void ServerPanelClientMainWindow::LoadDomains() {
    // Setup the domain structure
    SpDomain spDomain;
    // Set the account ID
    spDomain.saveProperty("iAccountId", ServerPanel::Instance()->GetRemoteAccount().getProperty("iAccountId").toInt());
    // Load the domains
    QVariantList qvlDomains = ServerPanel::Instance()->LoadDomains(spDomain);
    // Loop through the domains
    for (int iDomain = 0; iDomain < qvlDomains.length(); ++iDomain) {
        // Set the domain ID
        int iDomainId   = qvlDomains[iDomain].toMap()["iDomainId"].toInt();
        // Set the domain name
        QString sDomain = qvlDomains[iDomain].toMap()["sDomain"].toString();
        // Set the table row count
        this->mUserInterface->tblDomains->setRowCount(iDomain + 1);
        // Add the item
        this->mUserInterface->tblDomains->setItem(iDomain, 0, new QTableWidgetItem(sDomain));
    }
}

///////////////////////////////////////////////////////////////////////////////
/// Protected Slots //////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

void ServerPanelClientMainWindow::DomainDeleteButtonClicked(int iDomainId) {

}

void ServerPanelClientMainWindow::DomainEditButtonClicked(int iDomainId) {

}
