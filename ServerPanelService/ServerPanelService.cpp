///////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include "ServerPanelService.h"

///////////////////////////////////////////////////////////////////////////////
/// Globals //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

ServerPanelService* ServerPanelService::mInstance = NULL;

///////////////////////////////////////////////////////////////////////////////
/// Singleton ////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

ServerPanelService* ServerPanelService::Instance(int iArguments, char **aArguments) {
    // Check for an existing instance
    if (!mInstance) {
        // Create a new instance
        mInstance = new ServerPanelService(iArguments, aArguments);
    }
    // Return the instance
    return mInstance;
}

///////////////////////////////////////////////////////////////////////////////
/// Constructor //////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

ServerPanelService::ServerPanelService(int iArguments, char **aArguments) : QtService<QCoreApplication>(iArguments, aArguments, "") {
    // Set the service descripts
    setServiceDescription("ServerPanel RPC Service");
    // Set the service flags
    setServiceFlags(QtServiceBase::CanBeSuspended);
}

///////////////////////////////////////////////////////////////////////////////
/// Protected Methods ////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

void ServerPanelService::Pause() {
    // Pause the service
    this->mDaemon->Pause();
}

void ServerPanelService::Resume() {
    // Resume the service
    this->mDaemon->Resume();
}

void ServerPanelService::Start() {
    // Create the application
    QCoreApplication* cApplication = application();
    // Setup the daemon
    this->mDaemon = new ServerPanelServer(cApplication);
    // Check to see if the daemon is running
    if (!this->mDaemon->isListening()) {
        // Kill the application
        cApplication->quit();
    }
}
